@import '../common.scss';
@import './InputAreaMixins.scss';
@import '../typography-helpers.scss';
@import '../mixins.scss';

$input-area-padding-exclamation: 34px;
$input-area-padding-horizontal: 12px;
$input-area-padding-top: 6px;
$exclamation-horizontal: 8px;
$exclamation-top: 4px;
$gap: 6px;

.status {
  position: absolute;
  right: 6px;
  top: 0;
  margin: 6px;
}

.wrapper {
  position: relative;
}

.root {
  position: relative;
  display: flex;
  align-items: stretch;
  border: solid 1px;
  border-radius: 6px;
  @include BoxSizing();
  @include FontRoman();

  &.disabled textarea::placeholder {
    color: $D10-30;
  }
}

.inputArea {
  flex-grow: 1;
  flex-shrink: 1;
  min-width: 20px;
  min-height: 36px;
  padding: $input-area-padding-top $input-area-padding-horizontal;
  margin: 0;
  border: 0;
  outline: 0;
  background: transparent;
  cursor: auto;
  @include TextSizeAndFontFamily($size: medium, $weight: normal);

  @include Placeholder(getTextColor($light: true, $secondary: true));
  @include Selection($paletteB4);
  @include default-scroll-bar();
  &::-webkit-scrollbar-thumb {
    height: 30px;
  }

  &.sizeSmall {
    @include TextSizeAndFontFamily($size: small, $weight: normal);
  }
}

.counter {
  position: absolute;
  top: -30px;
  right: 0;
  font-size: 14px;
  line-height: 1.3;
  @include Placeholder($GR60);
  color: $D40;
}

.hasStatus {
  &> .inputArea {
    padding-right: $input-area-padding-exclamation;
  }
}

.resizable > textarea {
  resize: vertical;
}

.nonResizable > textarea {
  resize: none;
}

.exclamation {
  position: absolute;
  display: flex;
  align-items: center;
  flex-shrink: 0;
  flex-grow: 0;
  min-width: 0;
  user-select: none;
  margin: 0 6px;
  background-color: $paletteR1;
  width: 18px;
  height: 18px;
  border-radius: 50%;
  justify-content: center;
  &:last-child {
    margin: 0;
  }
  path {
    stroke: #fff;
  }

  top: $exclamation-top;
  right: $exclamation-horizontal;
}

.theme {
  &-normal {
    @include ThemeDefault(
      $color: $D10,
      $borderColor: $B30,
      $backgroundColor: $D80
    );
    @include ThemeHover($backgroundColor: $B50);
    @include ThemeFocus;
    @include ThemeError($borderColor: $paletteR1);
    @include ThemeWarning($borderColor: $paletteR5);
    @include ThemeDisabled(
      $borderColor: $D10-20,
      $backgroundColor: $D80,
      $color: $D10-30
    );
  }
  &-paneltitle {
    @include ThemeDefault(
      $color: white,
      $borderColor: $B30,
      $backgroundColor: rgba(22, 45, 61, 0.6)
    );
    @include ThemeHover($backgroundColor: rgba(22, 45, 61, 0.4));
    @include ThemeFocusPanelTile(
      $borderColor: $B20,
      $boxShadow: inset 0 0 5px 0 rgba(56, 153, 236, 0.6)
    );
    @include ThemeError($borderColor: $paletteR1);
    @include ThemeWarning($borderColor: $paletteR5);
  }
  &-amaterial {
    .inputArea {
      @include FontLight();
      @include Placeholder($GR60);
      padding-right: 37px;
    }
    border-radius: 0;
    @include ThemeDefault(
      $color: $D10,
      $borderColor: #e0e3e5,
      $backgroundColor: $D80
    );
    @include ThemeError($borderColor: $paletteR1);
    @include ThemeWarning($borderColor: $paletteR5);
  }
  &-material {
    border-radius: 0;
    .inputArea {
      @include FontLight();
    }
    @include ThemeDefault(
      $color: $D10,
      $borderColor: transparent,
      $backgroundColor: $D80
    );
    @at-root {
      .bar {
        position: absolute;
        bottom: 0;
        left: -1px;
        right: -1px;
        height: 1px;
        background: $D60;
        &:before,
        &:after {
          content: '';
          height: 1px;
          width: 0;
          bottom: 0;
          position: absolute;
          background: $D50;
          transition: 0.2s ease all;
        }
        &:before {
          left: 50%;
        }
        &:after {
          right: 50%;
        }
      }
      .hasFocus .bar:before,
      .hasFocus .bar:after {
        width: 50%;
      }
    }
  }
}

// RTL layout based on global style set on document body or parent element.
@include withRTL() {
  .exclamation {
    left: $exclamation-horizontal;
    right: initial;
  }

  .status {
    position: absolute;
    left: 6px;
    top: 0;
    right: auto;
  }

  .inputArea {
    direction: rtl;
  }
  .counter {
    right: auto;
  }
  .hasStatus {
    &> .inputArea {
      padding-left: $input-area-padding-exclamation;
      padding-right: $input-area-padding-horizontal;
    }
  }
}
